{"version":3,"sources":["components/Pokedex.js","App.js","reportWebVitals.js","index.js"],"names":["Pokedex","useState","pokemons","setPokemons","useEffect","axios","get","then","response","data","Container","className","map","pokemon","index","Card","body","CardHeader","Row","Col","xs","md","Name","Generation","CardBody","CardTitle","length","CardText","CardFooter","Evolved","Legendary","Shiny","Aquireable","Regional","Hatchable","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAsEeA,EAjEC,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACbC,EADa,KACHC,EADG,KAWlB,OAPAC,qBAAU,WACNC,IAAMC,IAAI,gBAAgBC,MAAK,SAACC,GAChCL,EAAYK,EAASC,YAMvB,eAACC,EAAA,EAAD,WACE,oBAAIC,UAAU,cAAd,qBAEIT,EAASU,KAAI,SAACC,EAASC,GAAV,OACX,eAACC,EAAA,EAAD,CAAMC,MAAI,EAACL,UAAU,cAArB,UACE,cAACM,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKR,UAAU,UAAUS,GAAG,IAAIC,GAAG,IAAnC,SAAyCR,EAAQS,OACjD,eAACH,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAf,6BAAqCR,EAAS,qBAC9C,eAACM,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAf,iCAAyCR,EAAQU,mBAGrD,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,eAACP,EAAA,EAAD,CAAKE,GAAG,IAAR,UAEE,eAACD,EAAA,EAAD,qBAAcN,EAAS,UACRA,EAAS,UAAWa,OAAS,EAA9B,eAA0Cb,EAAS,WAAc,QAC/E,eAACM,EAAA,EAAD,6BAAsBN,EAAS,aACRA,EAAS,aAAca,OAAS,EAAjC,eAA6Cb,EAAS,cAAiB,aAGjG,cAACY,EAAA,EAAD,qBACA,eAACE,EAAA,EAAD,WACE,eAACT,EAAA,EAAD,CAAKE,GAAG,IAAR,UACE,eAACD,EAAA,EAAD,qBAAcN,EAAS,iBACvB,eAACM,EAAA,EAAD,qBAAcN,EAAO,UAEvB,eAACK,EAAA,EAAD,CAAKE,GAAG,IAAR,UACE,eAACD,EAAA,EAAD,uBAAgBN,EAAO,OACvB,eAACM,EAAA,EAAD,sBAAeN,EAAO,UAExB,oBAAGF,UAAU,YAAb,2BAAyCE,EAAS,mBAClD,oBAAGF,UAAU,YAAb,2BAAyCE,EAAS,yBAGtD,eAACe,EAAA,EAAD,WAEE,4BAAwB,MAApBf,EAAQgB,QAAkB,kCAAoC,4BAClE,4BAA0B,MAAtBhB,EAAQiB,UAAoB,6BAA+B,OAC/D,4BAAsB,MAAlBjB,EAAQkB,MAAgB,yBAA2B,OACvD,4BAA2B,MAAvBlB,EAAQmB,WAAqB,qCAAuC,OACxE,4BAAyB,MAArBnB,EAAQoB,SAAmB,6BAA+B,OAC9D,4BAAiC,MAA7BpB,EAAS,gBAA0B,wCAA0C,OACjF,4BAA2B,MAAtBA,EAAQqB,WAA0F,MAAtBrB,EAAQqB,UAAvD,4CAAiJ,OAAtBrB,EAAQqB,UAAsB,6CAA+C,oBCnD7OC,MAPf,WACI,OACI,mCACI,cAAC,EAAD,OCMGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cec77605.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './Pokedex.css';\r\nimport { Container, Row, Col, Card, CardHeader, CardFooter, CardBody, CardTitle, CardText } from 'reactstrap';\r\n\r\nconst Pokedex = () => {\r\n  const [pokemons, setPokemons] = useState([]);\r\n    // constantes que vão receber os dados no state\r\n\r\n    useEffect(() => {\r\n        axios.get('pokemon.json').then((response) => {\r\n        setPokemons(response.data)\r\n      })\r\n    })\r\n    // fetch dos dados já convertidos para json  \r\n\r\n    return (\r\n      <Container>\r\n        <h3 className=\"text-center\">POKEDEX</h3>\r\n          {\r\n            pokemons.map((pokemon, index) => (\r\n              <Card body className=\"text-center\">\r\n                <CardHeader>\r\n                  <Row>\r\n                    <Col className=\"pokemon\" xs=\"1\" md=\"4\">{ pokemon.Name }</Col>\r\n                    <Col xs=\"1\" md=\"4\">Pokedex Number: { pokemon.['Pokedex Number'] }</Col>\r\n                    <Col xs=\"1\" md=\"4\">Pokemon Generation: { pokemon.Generation }</Col>\r\n                  </Row>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <CardTitle>\r\n                    <Row xs=\"2\">\r\n                      {/* caso o pokemon não possua um outro tipo ou local não vai aparecer o resto do código */}\r\n                      <Col> Type: { pokemon.['Type 1'] }\r\n                                  { (pokemon.['Type 2']).length > 0 ? ` and ${pokemon.['Type 2']}` : null }</Col>\r\n                      <Col>Where to find: { pokemon.['Weather 1'] } \r\n                                          { (pokemon.['Weather 2']).length > 0 ? ` and ${pokemon.['Weather 2']}` : null }</Col>\r\n                    </Row>\r\n                    </CardTitle>\r\n                  <CardTitle>STATUS</CardTitle>\r\n                  <CardText>\r\n                    <Row xs=\"2\">\r\n                      <Col>Total: { pokemon.['STAT TOTAL'] }</Col>\r\n                      <Col>Atack: { pokemon.['ATK'] }</Col>\r\n                    </Row>\r\n                    <Row xs=\"2\">\r\n                      <Col>Defense: { pokemon.['DEF'] }</Col>\r\n                      <Col>Status: { pokemon.['STA'] }</Col>\r\n                    </Row>\r\n                    <p className=\"card-text\">100% CP @ 39: { pokemon.['100% CP @ 39'] }</p>\r\n                    <p className=\"card-text\">100% CP @ 40: { pokemon.['100% CP @ 40'] }</p>                    \r\n                  </CardText>\r\n                </CardBody>\r\n                <CardFooter>\r\n                    {/* ternários de acordo com a ocasião que o pokemon vai aparecer */}\r\n                  <p>{pokemon.Evolved === '1' ? 'This Pokemon is already evolved' : 'This Pokemon can evolve'}</p>\r\n                  <p>{pokemon.Legendary === '1' ? 'This Pokemon is Legendary!' : null}</p>\r\n                  <p>{pokemon.Shiny === '1' ? 'This Pokemon is Shiny!' : null}</p>\r\n                  <p>{pokemon.Aquireable === '0' ? 'You can not aquire this Pokemon :(' : null}</p>\r\n                  <p>{pokemon.Regional === '1' ? 'This is a regional Pokemon' : null}</p>\r\n                  <p>{pokemon.['Not-Gettable'] === '1' ? 'You can not have this Pokemon, Sorry!' : null}</p>\r\n                  <p>{(pokemon.Hatchable === '2') ? 'You can hatch this Pokemon with a 2km egg' : (pokemon.Hatchable === '5') ? 'You can hatch this Pokemon with a 2km egg' : (pokemon.Hatchable === '10') ? 'You can hatch this Pokemon with a 10km egg' : null}</p>\r\n                </CardFooter>\r\n              </Card>\r\n            ))\r\n          }\r\n      </Container>  \r\n  )\r\n}\r\n\r\nexport default Pokedex;","import React from 'react';\r\nimport Pokedex from './components/Pokedex';\r\n\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <Pokedex />\r\n        </>\r\n    );\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}